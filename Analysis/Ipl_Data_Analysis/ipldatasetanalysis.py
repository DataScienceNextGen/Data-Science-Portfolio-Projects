# -*- coding: utf-8 -*-
"""IplDataSetAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PjWqv-aj6tFE4IU1jDxN-WiQVbxu-2tS

**Web Link **
https://towardsdatascience.com/exploratory-data-analysis-of-ipl-matches-part-1-c3555b15ed
"""

import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns 
ipl_matches_df = pd.read_csv('matches.csv')

#having a glance of first five records of the dataset
ipl_matches_df.head(1)

#how many rows & columns inside the dataset
ipl_matches_df.shape

#getting the frequency of most man of the match
ipl_matches_df["player_of_match"].value_counts()

#Getting the top 10 players with most man of the match onwaords
ipl_matches_df["player_of_match"].value_counts()[0:10]

#Getting the top 5 players with most man of the match onwaords
ipl_matches_df["player_of_match"].value_counts()[0:5]

plt.figure(figsize=(8,5))
withKey =list(ipl_matches_df["player_of_match"].value_counts()[0:5].keys())
withoutKey =list(ipl_matches_df["player_of_match"].value_counts()[0:5])
plt.title("Top 5 players with most man of the match")
plt.bar(withKey,withoutKey,color="g")
plt.show()

#Getting the frquency of result column
ipl_matches_df["result"].value_counts()

#finding out the number of toss wins w.r.t each team
ipl_matches_df["toss_winner"].value_counts()

#extracting the records where a team won batting first
batting_first = ipl_matches_df[ipl_matches_df["win_by_runs"]!=0]
#Looking at the head
batting_first.head()

#making a histogram
#we use histogram for numerical column
plt.figure(figsize=(5,7))
plt.hist(batting_first["win_by_runs"])
plt.title("Distribution of runs")
plt.xlabel("runs")
plt.show()

#finding out the number of wins w.r.t each team after batting first
ipl_matches_df["winner"].value_counts()

#Making a bar plot for top 3 teams with most wins after batting first
plt.figure(figsize=(6,6))
withKey =list(ipl_matches_df["winner"].value_counts()[0:3].keys())
withoutKey =list(ipl_matches_df["winner"].value_counts()[0:3])
plt.title("Top 5 players with most man of the match")
plt.bar(withKey,withoutKey,color=["blue","yellow","orange"])
plt.show()

#Making a pie chart
plt.figure(figsize=(7,7))
withKey =list(batting_first["winner"].value_counts())
withoutKey =list(batting_first["winner"].value_counts().keys())
plt.title("Batting first")
plt.pie(withKey,labels= withoutKey,autopct="%0.1f%%")
plt.show()

#extracting the records where a team won batting seconds
batting_second = ipl_matches_df[ipl_matches_df["win_by_wickets"]!=0]
#Looking at the head
batting_second.head()

#Making a histogram for frquency of wins w.r.t number of wickets
plt.figure(figsize=(7,7))
plt.hist(batting_second["win_by_wickets"], bins=30)
plt.title("Distribution of runs Batting Second")
plt.xlabel("runs")
plt.show()

#Finding out the frquency of number of wins w.r.t each time after batting second
batting_second["winner"].value_counts()

#Making a bar plot for top 3 teams with most wins after batting second
plt.figure(figsize=(6,6))
withKey =list(batting_second["winner"].value_counts()[0:3].keys())
withoutKey =list(batting_second["winner"].value_counts()[0:3])
plt.title("Top 3 teams with most wins after batting second")
plt.bar(withKey,withoutKey,color=["purple","blue","red"])
plt.show()

#Making a pie chart for distribution of most wins after batting second
plt.figure(figsize=(6,6))
withKey =list(batting_second["winner"].value_counts())
withoutKey =list(batting_second["winner"].value_counts().keys())
plt.title("Making a pie chart for distribution of most wins after batting second")
plt.pie(withKey,labels=withoutKey,autopct="%0.1f%%")
plt.show()

#Looking at the number of matches played each season
ipl_matches_df["season"].value_counts()

#Looking at the number of matches played each city
ipl_matches_df["city"].value_counts()

#Finding out how many times a team has own the matches after winning the toss
import numpy as np
np.sum(ipl_matches_df["toss_winner"] == ipl_matches_df["winner"])