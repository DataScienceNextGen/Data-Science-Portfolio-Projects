# -*- coding: utf-8 -*-
"""Covid_19_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_B0VI2yBtVfQL3tUhJuvm7xsAftDPnAc
"""

# Commented out IPython magic to ensure Python compatibility.
#Import all required libs
import numpy as np
import pandas as pd
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt

#import main dataset
covid_19_df = pd.read_csv("covid_19_india.csv", parse_dates=["Date"], dayfirst=True)

#first five rows from the dataset
covid_19_df.head()

covid_19_df.columns.to_list()

#keeping only required columns
custom_data_set=covid_19_df[["Date","State/UnionTerritory","Cured","Deaths","Confirmed"]]

custom_data_set.head()

#renaming the column name
custom_data_set.columns =["date","state","cured","deaths","confirmed"]

#change the effect the name is chaning or not
custom_data_set.head()

#last five records from the dataset
custom_data_set.tail()

#current Date
today = custom_data_set[custom_data_set.date =="2020-07-17"]

#first five records
today.head()

#Sorting data w.r.t number of confirmed cases
max_confirmed_cases = today.sort_values(by="confirmed", ascending=False)

#max confirmed cases
max_confirmed_cases

#Getting states with maximum number of confirmed cases
top_states_confirmed = max_confirmed_cases[0:5]

#display the result data
top_states_confirmed

#making the bar plot for states with top confimed cases
sns.set(rc={'figure.figsize':(15,10)})
sns.barplot(x="state", y="confirmed", data=top_states_confirmed, hue="state")
plt.show()

#sorting data w.r.t number of death cases
max_death_cases = today.sort_values(by="deaths", ascending=False)

#print maximum number of max death cases
max_death_cases

#Getting states with maximum number of death case
top_states_death = max_death_cases[0:5]

#top 5 death states
top_states_death

#making bar plot for states with top death cases
sns.set(rc={'figure.figsize':(15,10)})
sns.barplot(x="state", y="deaths", data=top_states_death, hue="state")
plt.show()

#sorting data w.r.t number of cured cases 
max_cured_cases = today.sort_values(by="cured", ascending=False)

#cured_cases data printing
max_cured_cases

#Getting states with maximum number of cured case
top_states_cured = max_cured_cases[0:5]

top_states_cured

#making bar plot for states with top cured cases
sns.set(rc={'figure.figsize':(15,10)})
sns.barplot(x="state", y="cured", data=top_states_cured, hue="state")
plt.show()

#Maharastra state analysis
maha = custom_data_set[custom_data_set.state =="Maharashtra"]
#custom_data_set[custom_data_set.date =="2020-07-17"]

maha.tail()

#visualizing confirmed cases in maharastra
sns.set(rc={'figure.figsize':(15,10)})
sns.lineplot(x="date", y="confirmed", data=maha, color="g")
plt.show()

#visualizing death cases in maharastra
sns.set(rc={'figure.figsize':(15,10)})
sns.lineplot(x="date", y="deaths", data=maha, color="r")
plt.show()

#kerala
kerala_data_set = custom_data_set[custom_data_set.state =="Kerala"]

kerala_data_set

#visualizing confirmed cases in kerala
sns.set(rc={'figure.figsize':(15,10)})
sns.lineplot(x="date", y="confirmed", data=kerala_data_set, color="g")
plt.show()

#visualizing death cases in kerala
sns.set(rc={'figure.figsize':(15,10)})
sns.lineplot(x="date", y="deaths", data=kerala_data_set, color="r")
plt.show()

#jammu & kashmir dataset
jk_data_set=custom_data_set[custom_data_set.state =="Jammu and Kashmir"]

#print Jammu & kashmir dataset
jk_data_set

#visualized confirmed cases in JK
sns.set(rc={'figure.figsize':(15,10)})
sns.lineplot(x="date", y="confirmed", data=jk_data_set, color="g")
plt.show()

#visualizing death cases in JK
sns.set(rc={'figure.figsize':(15,10)})
sns.lineplot(x="date", y="deaths", data=jk_data_set, color="r")
plt.show()

#converting date-time to ordinal
maha['date'] = maha['date'].map(dt.datetime.toordinal)

x=maha['date'] #independent variable
y=maha['confirmed'] #dependent variable

#linear regression
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3)

x_train.shape

from sklearn.linear_model import LinearRegression

#create one instance
LinearModel = LinearRegression()

y_train

#Fit the linear model
LinearModel.fit(np.array(x_train).reshape(-1,1),np.array(y_train).reshape(-1,1))

maha.tail()

LinearModel.predict(np.array([[2020-7-19]]))